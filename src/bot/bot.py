import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import psycopg2
from dotenv import load_dotenv
import os
import openpyxl
import re
import PyPDF2
from io import BytesIO

# Load environment variables from .env file
load_dotenv()

# Database connection details from .env file
BOT_TOKEN = os.getenv("BOT_TOKEN")
DB_HOST = os.getenv("DB_HOST")
DB_NAME = os.getenv("DB_NAME")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")

# Initialize the bot with your token
bot = telebot.TeleBot(BOT_TOKEN)

# Admin user ID (you can store this in your .env file too)
ADMIN_USER_ID = os.getenv("ADMIN_USER_ID", "YOUR_ADMIN_USER_ID")

# Check if all necessary environment variables are set
if not all([DB_HOST, DB_NAME, DB_USER, DB_PASSWORD, ADMIN_USER_ID]):
    raise ValueError("Missing one or more required environment variables.")

# Connect to PostgreSQL database
def connect_to_db():
    try:
        conn = psycopg2.connect(
            host=DB_HOST,
            database=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD
        )
        return conn
    except Exception as e:
        print(f"Error connecting to the database: {e}")
        return None

# Function to read SQL queries from files
def read_sql_file(filename):
    file_path = os.path.join("src/database", filename)
    try:
        with open(file_path, 'r', encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        raise FileNotFoundError(f"The SQL file '{file_path}' was not found.")

# Create a table for user registration if it doesn't exist
def create_user_table():
    conn = connect_to_db()
    if conn:
        try:
            create_table_query = read_sql_file("create_table.sql")
            cur = conn.cursor()
            cur.execute(create_table_query)
            conn.commit()
            cur.close()
            conn.close()
        except Exception as e:
            print(f"Error creating table: {e}")

# Function to register a user in the database
def register_user(user_id, surname, name, address, phone_number):
    conn = connect_to_db()
    if conn:
        try:
            insert_query = read_sql_file("insert.sql")
            cur = conn.cursor()
            cur.execute(insert_query, (user_id, surname, name, address, phone_number, 0))  # Add 0 for number_of_tickets
            conn.commit()
            cur.close()
            conn.close()
            return True
        except Exception as e:
            print(f"Error registering user: {e}")
            return False
    return False

def send_menu(message):
    user_id = message.from_user.id
    if str(user_id) == ADMIN_USER_ID:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_admin_menu())
    else:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_menu())

# Function to check if the user is registered
def check_user_registration(user_id):
    conn = connect_to_db()
    if conn:
        try:
            select_query = read_sql_file("select.sql")
            cur = conn.cursor()
            cur.execute(select_query, (user_id,))
            user = cur.fetchone()
            cur.close()
            conn.close()
            return user
        except Exception as e:
            print(f"Error checking user registration: {e}")
    return None

# Function to generate an Excel file with user data
def generate_excel_report(users):
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Users and Tickets"

    # Add headers for user data
    headers = ["User ID", "Surname", "Name", "Address", "Phone Number", "Number of Tickets", "Ticket ID", "Ticket Date"]
    ws.append(headers)

    # Add user data and their tickets
    for user in users:
        user_id = user[0]
        user_data = list(user[:6])  # User data without tickets
        tickets = get_user_tickets(user_id)
        
        if tickets:
            for ticket in tickets:
                ticket_data = [ticket[0], ticket[1].strftime('%d.%m.%Y %H:%M')]  # Ticket ID and Date
                ws.append(user_data + ticket_data)
        else:
            ws.append(user_data + ["No tickets", "N/A"])

    # Save to an in-memory byte stream (to send it as a file)
    byte_stream = BytesIO()
    wb.save(byte_stream)
    byte_stream.seek(0)

    # Create a file-like object with the correct extension
    byte_stream.name = "user_tickets_data.xlsx"  # Explicitly set the file name
    return byte_stream

# Function to fetch all users from the database
def get_all_users():
    conn = connect_to_db()
    if conn:
        try:
            select_query = "SELECT * FROM users"
            cur = conn.cursor()
            cur.execute(select_query)
            users = cur.fetchall()
            cur.close()
            conn.close()
            return users
        except Exception as e:
            print(f"Error fetching users: {e}")
            return []
    return []

# Function to fetch all users from the database
def get_all_users():
    conn = connect_to_db()
    if conn:
        try:
            select_query = "SELECT * FROM users"
            cur = conn.cursor()
            cur.execute(select_query)
            users = cur.fetchall()
            cur.close()
            conn.close()
            return users
        except Exception as e:
            print(f"Error fetching users: {e}")
            return []
    return []

# Function to read a file and return its content
def file_reader(filename):
    try:
        with open(filename, 'r', encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        raise FileNotFoundError(f"The file '{filename}' was not found.")

# Function to create the custom keyboard menu
def create_menu():
    menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    menu.add(KeyboardButton("–ú–æ–∏ –±–∏–ª–µ—Ç—ã"), KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã"), KeyboardButton("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"))
    return menu

def create_admin_menu():
    menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    menu.add(KeyboardButton("–ú–æ–∏ –±–∏–ª–µ—Ç—ã"), KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã"), KeyboardButton("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"))
    menu.add(KeyboardButton("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"), KeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"))
    return menu
def return_to_menu(chat_id, user_id):
    if str(user_id) == ADMIN_USER_ID:
        bot.send_message(chat_id, "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_admin_menu())
    else:
        bot.send_message(chat_id, "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_menu())
@bot.message_handler(commands=['start'])
def main(message):
    user_id = message.from_user.id  # Get the user ID
    try:
        welcome_text = file_reader("WELCOME.md")
        if str(user_id) == ADMIN_USER_ID:
            bot.send_message(message.chat.id, welcome_text, parse_mode='HTML', reply_markup=create_admin_menu())
        else:
            bot.send_message(message.chat.id, welcome_text, parse_mode='HTML', reply_markup=create_menu())
    except FileNotFoundError:
        default_welcome_message = (
            "üéü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–æ–Ω–∫—É—Ä—Å –ë–æ—Ç!</b> üéü\n\n"
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö –∫–æ–Ω–∫—É—Ä—Å–∞—Ö. üéâ\n\n"
            "üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞:</b> 7900 –¢–ì –∑–∞ —É—á–∞—Å—Ç–∏–µ\n"
            "üìú <b>–ü—Ä–∞–≤–∏–ª–∞ –∫–æ–Ω–∫—É—Ä—Å–∞:</b>\n\n"
            "–í–∞—à –±–∏–ª–µ—Ç –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 7900 –¢–ì.\n"
            "–ï—Å–ª–∏ —Å—É–º–º–∞, —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤ –±–∏–ª–µ—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 15800 –¢–ì, —É –≤–∞—Å –±—É–¥–µ—Ç 2 –±–∏–ª–µ—Ç–∞ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.\n"
            "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.\n\n"
            "üìå <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "üîπ <i>–ú–æ–∏ –±–∏–ª–µ—Ç—ã</i> ‚Äì –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è.\n"
            "üîπ <i>–ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã</i> ‚Äì –ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã.\n"
            "üîπ <i>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</i> ‚Äì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–∫—É—Ä—Å–∞.\n\n"
            "‚úÖ –ù–∞–∂–º–∏—Ç–µ <b>–ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç</b>, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!\n"
            "üîî –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏!\n\n"
            "–ù–∞—á–Ω–µ–º‚Äî–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üëá")
        if str(user_id) == ADMIN_USER_ID:
            bot.send_message(message.chat.id, default_welcome_message, parse_mode='HTML', reply_markup=create_admin_menu())
        else:
            bot.send_message(message.chat.id, default_welcome_message, parse_mode='HTML', reply_markup=create_menu())

    user = check_user_registration(user_id)
    if not user:
        bot.send_message(message.chat.id, "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:")
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
        bot.register_next_step_handler(message, ask_surname)
    else:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üéâ")
        return_to_menu(message.chat.id, message.from_user.id)
    
# Handler for the "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö" button (admin only)
@bot.message_handler(func=lambda message: message.text == "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
def export_data(message):
    if str(message.from_user.id) == ADMIN_USER_ID:
        users = get_all_users()
        if users:
            excel_file = generate_excel_report(users)
            bot.send_document(message.chat.id, excel_file, caption="User and Tickets Data Report")
        else:
            bot.send_message(message.chat.id, "No users found in the database.")
    else:
        bot.send_message(message.chat.id, "You do not have permission to perform this action.")

# Handler for the "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏" button (admin only)
@bot.message_handler(func=lambda message: message.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
def manage_users(message):
    if str(message.from_user.id) == ADMIN_USER_ID:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_admin_management_menu())
    else:
        bot.send_message(message.chat.id, "You do not have permission to perform this action.")

# Function to create the admin management menu
def create_admin_management_menu():
    menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    menu.add(KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
    menu.add(KeyboardButton("–ù–∞–∑–∞–¥"))
    return menu

# Handler for the "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" button (admin only)
@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
def add_user(message):
    if str(message.from_user.id) == ADMIN_USER_ID:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, process_add_user)
    else:
        bot.send_message(message.chat.id, "You do not have permission to perform this action.")

# Function to process adding a user
def process_add_user(message):
    user_id = message.text
    # Add logic to add the user to the database
    bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω.")

# Handler for the "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" button (admin only)
@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
def delete_user(message):
    if str(message.from_user.id) == ADMIN_USER_ID:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, process_delete_user)
    else:
        bot.send_message(message.chat.id, "You do not have permission to perform this action.")

# Function to process deleting a user
def process_delete_user(message):
    user_id = message.text
    # Add logic to delete the user from the database
    bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª–µ–Ω.")

# Handler for the "–ù–∞–∑–∞–¥" button (admin only)
@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
def back_to_main_menu(message):
    if str(message.from_user.id) == ADMIN_USER_ID:
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_admin_menu())
    else:
        bot.send_message(message.chat.id, "You do not have permission to perform this action.")

# Function to ask for surname
def ask_surname(message):
    user_id = message.from_user.id
    surname = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    bot.register_next_step_handler(message, ask_name, surname)

# Function to ask for name
def ask_name(message, surname):
    user_id = message.from_user.id
    name = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å (–ì–æ—Ä–æ–¥, —Ä–∞–π–æ–Ω, —É–ª–∏—Ü–∞, –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã):")
    bot.register_next_step_handler(message, ask_address, surname, name)

# Function to ask for address
def ask_address(message, surname, name):
    user_id = message.from_user.id
    address = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: (8 ### ### ## ##)")
    bot.register_next_step_handler(message, ask_phone_number, surname, name, address)

# Function to ask for phone number and complete registration
def ask_phone_number(message, surname, name, address):
    user_id = message.from_user.id
    phone_number = message.text
    user = check_user_registration(user_id)
    if user:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üéâ")
        return
    if register_user(user_id, surname, name, address, phone_number):
        bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ")
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def update_tickets(user_id, bill_amount, bill_number):
    conn = connect_to_db()
    if conn:
        try:
            tickets_count = bill_amount // 7900
            cur = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —á–µ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            check_ticket_query = "SELECT 1 FROM tickets WHERE user_id = %s AND bill_number = %s"
            cur.execute(check_ticket_query, (user_id, bill_number))
            existing_ticket = cur.fetchone()

            if existing_ticket:
                bot.send_message(user_id, "–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —ç—Ç–æ—Ç —á–µ–∫.")
                return 0

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤
            insert_ticket_query = "INSERT INTO tickets (user_id, bill_number) VALUES (%s, %s)"
            for _ in range(tickets_count):
                cur.execute(insert_ticket_query, (user_id, bill_number))

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∏–ª–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update_user_query = """
                UPDATE users 
                SET number_of_tickets = number_of_tickets + %s 
                WHERE user_id = %s
            """
            cur.execute(update_user_query, (tickets_count, user_id))

            conn.commit()
            return tickets_count

        except psycopg2.IntegrityError as e:
            print(f"–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
            bot.send_message(user_id, "–≠—Ç–æ—Ç —á–µ–∫ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            return 0
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–æ–≤: {e}")
            bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return 0
        finally:
            cur.close()
            conn.close()
    return 0

def get_user_tickets(user_id):
    conn = connect_to_db()
    if conn:
        try:
            query = """
                SELECT 
                    t.ticket_id,
                    t.created_at,
                    u.surname,
                    u.name
                FROM tickets t
                JOIN users u ON t.user_id = u.user_id
                WHERE t.user_id = %s
                ORDER BY t.ticket_id
            """
            cur = conn.cursor()
            cur.execute(query, (user_id,))
            tickets = cur.fetchall()
            return tickets
        except Exception as e:
            print(f"Error fetching tickets: {e}")
            return []
        finally:
            cur.close()
            conn.close()
    return []


# Handler for the "–ú–æ–∏ –±–∏–ª–µ—Ç—ã" button
@bot.message_handler(func=lambda message: message.text == "–ú–æ–∏ –±–∏–ª–µ—Ç—ã")
def my_tickets(message):
    user_id = message.from_user.id
    user = check_user_registration(user_id)
    
    if not user:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã‚ùå")
        return
    
    tickets = get_user_tickets(user_id)
    response = [
        f"üé´ –í–∞—à–∏ –±–∏–ª–µ—Ç—ã (–≤—Å–µ–≥–æ {len(tickets)}):",
        *[f"ID: {t[0]} | –î–∞—Ç–∞: {t[1].strftime('%d.%m.%Y %H:%M')}" for t in tickets],
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
    ]
    bot.send_message(message.chat.id, "\n".join(response))
    return_to_menu(message.chat.id, message.from_user.id)


# Handler for the "–ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã" button
@bot.message_handler(func=lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã")
def get_tickets(message):
    user_id = message.from_user.id
    user = check_user_registration(user_id)
    
    if not user:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã‚ùå")
        return
    
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ —Å —Å—É–º–º–æ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã.")

# Handler for the "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã" button
@bot.message_handler(func=lambda message: message.text == "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
def results(message):
    bot.send_message(message.chat.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–∫—É—Ä—Å–∞ –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ.")

# Handler for the /export_users command (admin only)
@bot.message_handler(commands=['export_users'])
def export_users(message):
    if message.from_user.id == int(ADMIN_USER_ID):  # Check if the user is the admin
        users = get_all_users()
        if users:
            excel_file = generate_excel_report(users)
            bot.send_document(message.chat.id, excel_file, caption="User Data Report", file_name="user_data.xlsx")
        else:
            bot.send_message(message.chat.id, "No users found in the database.")
    else:
        bot.send_message(message.chat.id, "You do not have permission to perform this action.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF-—Ñ–∞–π–ª–∞
def extract_text_from_pdf(pdf_file):
    pdf_reader = PyPDF2.PdfReader(pdf_file)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º PdfReader –≤–º–µ—Å—Ç–æ PdfFileReader
    text = ""
    for page_num in range(len(pdf_reader.pages)):
        page = pdf_reader.pages[page_num]
        text += page.extract_text()
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —á–µ–∫–∞
def extract_receipt_data(text):
    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    amount_pattern = amount_pattern = r"(\d{1,3}(?: \d{3})*|\d+) ? ‚Ç∏"
    date_pattern = r"(\d{2}\.\d{2}\.\d{4} \d{2}:\d{2})"
    name_pattern = r"([–ê-–Ø–∞-—è]+\s[–ê-–Ø–∞-—è]+\.)"
    number_pattern = r"‚Ññ —á–µ–∫–∞ ([A-Z]{2}\d{10})"

    amount = re.search(amount_pattern, text)
    date = re.search(date_pattern, text)
    name = re.search(name_pattern, text)
    number = re.search(number_pattern, text)

    return {
        "amount": amount.group(1) if amount else None,
        "date": date.group(1) if date else None,
        "name": name.group(1) if name else None,
        "number": number.group(1) if number else None,
    }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PDF-—Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(content_types=['document'])
def handle_document(message):
    if message.document.mime_type == 'application/pdf':
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        pdf_file = BytesIO(downloaded_file)

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF
        text = extract_text_from_pdf(pdf_file)
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —á–µ–∫–∞
        receipt_data = extract_receipt_data(text)

        if receipt_data["amount"] and receipt_data["number"]:
            amount = int(receipt_data["amount"].replace(" ", "").replace(",", ""))
            bill_number = receipt_data["number"]
            user_id = message.from_user.id
            tickets = update_tickets(user_id, amount, bill_number)

            if tickets > 0:
                bot.send_message(message.chat.id, f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {tickets} –±–∏–ª–µ—Ç–æ–≤! üéü")
            else:
                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –±–∏–ª–µ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—É–º–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.")
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —á–µ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.")
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
        return_to_menu(message.chat.id, message.from_user.id)
# Start polling for messages
bot.polling(non_stop=True)