import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import psycopg2
from dotenv import load_dotenv
import os
import openpyxl
import re
import PyPDF2
from io import BytesIO
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
DB_HOST = os.getenv("DB_HOST")
DB_NAME = os.getenv("DB_NAME")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
ADMIN_USER_ID = os.getenv("ADMIN_USER_ID", "YOUR_ADMIN_USER_ID")

required_env_vars = ["DB_HOST", "DB_NAME", "DB_USER", "DB_PASSWORD", "ADMIN_USER_ID", "BOT_TOKEN"]
missing_vars = [var for var in required_env_vars if not os.getenv(var)]
if missing_vars:
    raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")

bot = telebot.TeleBot(BOT_TOKEN)


def get_database_connection():
    try:
        conn = psycopg2.connect(
            host=DB_HOST,
            database=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD
        )
        return conn
    except psycopg2.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def execute_sql_from_file(filename):
    file_path = os.path.join("src", "bot", "database", filename)
    try:
        with open(file_path, 'r', encoding="utf-8") as file:
            return file.read()
    except FileNotFoundError:
        error_message = f"SQL —Ñ–∞–π–ª '{file_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω."
        logging.error(error_message)
        raise FileNotFoundError(error_message)

def create_user_table_if_not_exists():
    conn = get_database_connection()
    if conn:
        try:
            create_table_query = execute_sql_from_file("create_table.sql")
            cursor = conn.cursor()
            cursor.execute(create_table_query)
            conn.commit()
            cursor.close()
            conn.close()
            logging.info("–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ (–∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞).")
        except psycopg2.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def register_new_user(user_id, surname, name, address, phone_number):
    conn = get_database_connection()
    if conn:
        try:
            insert_query = execute_sql_from_file("insert.sql") 
            cursor = conn.cursor()
            cursor.execute(insert_query, (user_id, surname, name, address, phone_number, 0))
            conn.commit()
            cursor.close()
            conn.close()
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return True
        except psycopg2.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    return False

def is_user_registered(user_id):
    conn = get_database_connection()
    if conn:
        try:
            select_query = execute_sql_from_file("select.sql")
            cursor = conn.cursor()
            cursor.execute(select_query, (user_id,))
            user = cursor.fetchone()
            cursor.close()
            conn.close()
            return user is not None
        except psycopg2.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    return False

def fetch_all_users():
    conn = get_database_connection()
    if conn:
        try:
            select_query = "SELECT * FROM users"
            cursor = conn.cursor()
            cursor.execute(select_query)
            users = cursor.fetchall()
            cursor.close()
            conn.close()
            return users
        except psycopg2.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    return []

def fetch_user_tickets(user_id):
    conn = get_database_connection()
    if conn:
        try:
            query = """
                SELECT
                    t.ticket_id,
                    t.created_at,
                    u.surname,
                    u.name
                FROM tickets t
                JOIN users u ON t.user_id = u.user_id
                WHERE t.user_id = %s
                ORDER BY t.ticket_id
            """
            cursor = conn.cursor()
            cursor.execute(query, (user_id,))
            tickets = cursor.fetchall()
            return tickets
        except psycopg2.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []
        finally:
            if conn:
                cursor.close()
                conn.close()
    return []

def update_user_tickets_count(user_id, bill_amount, bill_number):
    conn = get_database_connection()
    if conn:
        try:
            tickets_count = bill_amount // 7900
            cursor = conn.cursor()

            check_ticket_query = "SELECT 1 FROM tickets WHERE user_id = %s AND bill_number = %s"
            cursor.execute(check_ticket_query, (user_id, bill_number))
            existing_ticket = cursor.fetchone()
            if existing_ticket:
                bot.send_message(user_id, "‚ö†Ô∏è –í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —ç—Ç–æ—Ç —á–µ–∫. ‚ö†Ô∏è")
                return 0

            insert_ticket_query = "INSERT INTO tickets (user_id, bill_number) VALUES (%s, %s)"
            for _ in range(tickets_count):
                cursor.execute(insert_ticket_query, (user_id, bill_number))

            update_user_query = """
                UPDATE users
                SET number_of_tickets = number_of_tickets + %s
                WHERE user_id = %s
            """
            cursor.execute(update_user_query, (tickets_count, user_id))
            conn.commit()
            return tickets_count

        except psycopg2.IntegrityError as unique_error:
            logging.error(f"–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–æ–≤: {unique_error}")
            bot.send_message(user_id, "üö´ –≠—Ç–æ—Ç —á–µ–∫ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. üö´")
            return 0
        except psycopg2.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ùå")
            return 0
        finally:
            if conn:
                cursor.close()
                conn.close()
    return 0

def delete_user_from_db(user_id):
    conn = get_database_connection()
    if conn:
        try:
            delete_query = execute_sql_from_file("delete_user.sql")
            cursor = conn.cursor()
            cursor.execute(delete_query, (user_id,))
            conn.commit()
            cursor.close()
            conn.close()
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            return True
        except psycopg2.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    return False

def admin_add_new_user_to_db(user_id, surname=None, name=None, address=None, phone_number=None, number_of_tickets=0):
    conn = get_database_connection()
    if conn:
        try:
            insert_query = execute_sql_from_file("admin_insert_user.sql")
            cursor = conn.cursor()
            cursor.execute(insert_query, (user_id, surname, name, address, phone_number, number_of_tickets))
            conn.commit()
            cursor.close()
            conn.close()
            logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
            return True
        except psycopg2.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            return False
    return False


def create_main_menu():
    menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False) 
    menu.add(KeyboardButton("üé´ –ú–æ–∏ –±–∏–ª–µ—Ç—ã"), KeyboardButton("üéüÔ∏è –ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã"), KeyboardButton("üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã"))
    return menu

def create_admin_menu():
    menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    menu.add(KeyboardButton("üé´ –ú–æ–∏ –±–∏–ª–µ—Ç—ã"), KeyboardButton("üéüÔ∏è –ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã"), KeyboardButton("üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã"))
    menu.add(KeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"), KeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"))
    return menu

def create_admin_management_menu():
    management_menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    management_menu.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
    management_menu.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return management_menu

def send_main_menu(chat_id, is_admin):
    if is_admin:
        reply_markup = create_admin_menu()
    else:
        reply_markup = create_main_menu()
    bot.send_message(chat_id, "‚ú® *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:* ‚ú®", reply_markup=reply_markup, parse_mode='Markdown')

def send_back_to_menu_message(chat_id, is_admin):
    if is_admin:
        reply_markup = create_admin_menu()
    else:
        reply_markup = create_main_menu()
    bot.send_message(chat_id, "‚¨ÖÔ∏è *–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:* ‚¨ÖÔ∏è", reply_markup=reply_markup, parse_mode='Markdown')


def generate_users_excel_report(users):
    workbook = openpyxl.Workbook()
    worksheet = workbook.active
    worksheet.title = "Users and Tickets"

    headers = ["User ID", "–§–∞–º–∏–ª–∏—è", "–ò–º—è", "–ê–¥—Ä–µ—Å", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤", "ID –±–∏–ª–µ—Ç–∞", "–î–∞—Ç–∞ –±–∏–ª–µ—Ç–∞"]
    worksheet.append(headers)

    for user in users:
        user_id = user[0]
        user_data = list(user[:6])
        tickets = fetch_user_tickets(user_id)

        if tickets:
            for ticket in tickets:
                ticket_data = [ticket[0], ticket[1].strftime('%d.%m.%Y %H:%M')]
                worksheet.append(user_data + ticket_data)
        else:
            worksheet.append(user_data + ["–ù–µ—Ç –±–∏–ª–µ—Ç–æ–≤", "N/A"])

    byte_stream = BytesIO()
    workbook.save(byte_stream)
    byte_stream.seek(0)
    byte_stream.name = "user_tickets_data.xlsx"
    return byte_stream


def read_file_content(filename):
    try:
        with open(filename, 'r', encoding="utf-8") as file:
            return file.read()
    except FileNotFoundError:
        error_message = f"–§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω."
        logging.error(error_message)
        raise FileNotFoundError(error_message)


def extract_text_from_pdf_file(pdf_file):
    pdf_reader = PyPDF2.PdfReader(pdf_file)
    text = ""
    for page_num in range(len(pdf_reader.pages)):
        page = pdf_reader.pages[page_num]
        text += page.extract_text()
    return text

def extract_receipt_details(text):
    amount_pattern = r"(\d{1,3}(?: \d{3})*|\d+) ?‚Ç∏"
    date_pattern = r"(\d{2}\.\d{2}\.\d{4} \d{2}:\d{2})"
    name_pattern = r"([–ê-–Ø–∞-—è]+\s[–ê-–Ø–∞-—è]+\.)"
    number_pattern = r"‚Ññ —á–µ–∫–∞ ([A-Z]{2}\d{10})"

    amount_match = re.search(amount_pattern, text)
    date_match = re.search(date_pattern, text)
    name_match = re.search(name_pattern, text)
    number_match = re.search(number_pattern, text)

    return {
        "amount": amount_match.group(1).replace(" ", "") if amount_match else None,
        "date": date_match.group(1) if date_match else None,
        "name": name_match.group(1) if name_match else None,
        "number": number_match.group(1) if number_match else None,
    }


@bot.message_handler(commands=['start'])
def start_command_handler(message):
    user_id = message.from_user.id
    is_admin = str(user_id) == ADMIN_USER_ID

    image_path = os.path.join("src", "bot", "images", "welcome_image.png")
    try:
        with open(image_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo)
    except FileNotFoundError:
        logging.error(f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")


    welcome_message = (
        "üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–æ–Ω–∫—É—Ä—Å –ë–æ—Ç!* üéâ\n\n"
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üëã –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö –∫–æ–Ω–∫—É—Ä—Å–∞—Ö. üöÄ\n\n"
        "üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞:* 7900 –¢–ì –∑–∞ —É—á–∞—Å—Ç–∏–µ\n"
        "üìú *–ü—Ä–∞–≤–∏–ª–∞ –∫–æ–Ω–∫—É—Ä—Å–∞:*\n\n"
        "–í–∞—à —á–µ–∫ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å —Å—É–º–º—É *–Ω–µ –º–µ–Ω–µ–µ* 7900 –¢–ì.\n"
        "–ï—Å–ª–∏ —Å—É–º–º–∞ —á–µ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, 15800 –¢–ì, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ *2 –±–∏–ª–µ—Ç–∞* –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.\n"
        "–î–ª—è —É—á–∞—Å—Ç–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ *PDF*.\n\n"
        "üìå *–ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é:* üìå\n"
        "üé´ */–ú–æ–∏ –±–∏–ª–µ—Ç—ã* ‚Äì –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤, –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è.\n"
        "üéüÔ∏è */–ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã* ‚Äì –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–∏ –±–∏–ª–µ—Ç—ã!\n"
        "üèÜ */–†–µ–∑—É–ª—å—Ç–∞—Ç—ã* ‚Äì –£–∑–Ω–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—à–µ–¥—à–∏—Ö –∏ –±—É–¥—É—â–∏—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤!\n\n"
        "üëá –ù–∞–∂–º–∏—Ç–µ *¬´–ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç¬ª*, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å! üëá\n"
        "üîî –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–∞—Ö! üîî\n"
    )

    bot.send_message(message.chat.id, welcome_message, parse_mode='Markdown')

    send_main_menu(message.chat.id, is_admin) 

    if not is_user_registered(user_id):
        bot.send_message(message.chat.id, "üìù –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:")
        bot.send_message(message.chat.id, "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É *—Ñ–∞–º–∏–ª–∏—é*:")
        bot.register_next_step_handler(message, ask_for_surname)
    else:
        bot.send_message(message.chat.id, "üéâ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞! üéâ")
        send_back_to_menu_message(message.chat.id, is_admin) 


@bot.message_handler(func=lambda message: message.text == "üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
def export_data_handler(message):
    if str(message.from_user.id) == ADMIN_USER_ID:
        users = fetch_all_users()
        if users:
            excel_file = generate_users_excel_report(users)
            bot.send_document(message.chat.id, excel_file, caption="üìä *–û—Ç—á–µ—Ç –ø–æ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –±–∏–ª–µ—Ç–∞–º* üìä", parse_mode='Markdown')
        else:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. ‚ÑπÔ∏è")
    else:
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. üö´")


@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
def manage_users_handler(message):
    if str(message.from_user.id) == ADMIN_USER_ID:
        bot.send_message(message.chat.id, "‚öôÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:* ‚öôÔ∏è", reply_markup=create_admin_management_menu(), parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. üö´")


@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
def add_user_handler(message):
    if str(message.from_user.id) == ADMIN_USER_ID:
        bot.send_message(message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ *ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*:")
        bot.register_next_step_handler(message, process_add_user_id_input)
    else:
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. üö´")

def process_add_user_id_input(message):
    user_id_to_add = message.text
    try:
        user_id_int = int(user_id_to_add)
        bot.send_message(message.chat.id, f"üë§ –í–≤–µ–¥–∏—Ç–µ *—Ñ–∞–º–∏–ª–∏—é* –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id_int} (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –Ω–∞–∂–∞–≤ /skip):")
        bot.register_next_step_handler(message, process_add_user_surname_input, user_id=user_id_int)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ *—á–∏—Å–ª–æ–≤–æ–π ID*. ‚ùå")
        send_back_to_menu_message(message.chat.id, True)

def process_add_user_surname_input(message, user_id):
    surname = message.text
    if message.text == '/skip':
        surname = None
    bot.send_message(message.chat.id, f"üë§ –í–≤–µ–¥–∏—Ç–µ *–∏–º—è* –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} (–∏–ª–∏ /skip):")
    bot.register_next_step_handler(message, process_add_user_name_input, user_id=user_id, surname=surname)

def process_add_user_name_input(message, user_id, surname):
    name = message.text
    if message.text == '/skip':
        name = None
    bot.send_message(message.chat.id, f"üìç –í–≤–µ–¥–∏—Ç–µ *–∞–¥—Ä–µ—Å* –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} (–∏–ª–∏ /skip):")
    bot.register_next_step_handler(message, process_add_user_address_input, user_id=user_id, surname=surname, name=name)

def process_add_user_address_input(message, user_id, surname, name):
    address = message.text
    if message.text == '/skip':
        address = None
    bot.send_message(message.chat.id, f"üìû –í–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} (–∏–ª–∏ /skip):")
    bot.register_next_step_handler(message, process_add_user_phone_input, user_id=user_id, surname=surname, name=name, address=address)

def process_add_user_phone_input(message, user_id, surname, name, address):
    phone_number = message.text
    if message.text == '/skip':
        phone_number = None

    if admin_add_new_user_to_db(user_id, surname, name, address, phone_number):
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ *–¥–æ–±–∞–≤–ª–µ–Ω* –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. ‚úÖ")
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    else:
        bot.send_message(message.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. ‚ùå")

    send_back_to_menu_message(message.chat.id, True)

@bot.message_handler(func=lambda message: message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
def delete_user_handler(message):
    if str(message.from_user.id) == ADMIN_USER_ID:
        bot.send_message(message.chat.id, "‚ûñ –í–≤–µ–¥–∏—Ç–µ *ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è*:")
        bot.register_next_step_handler(message, process_user_deletion_input)
    else:
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. üö´")

def process_user_deletion_input(message):
    user_id_to_delete = message.text
    try:
        user_id_int = int(user_id_to_delete)
        if delete_user_from_db(user_id_int):
            bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_delete} —É—Å–ø–µ—à–Ω–æ *—É–¥–∞–ª–µ–Ω*. ‚úÖ")
            logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_delete}.")
        else:
            bot.send_message(message.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id_to_delete}. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. ‚ùå")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ *—á–∏—Å–ª–æ–≤–æ–π ID*. ‚ùå")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. ‚ùå")


@bot.message_handler(func=lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back_to_admin_menu_handler(message):
    is_admin = str(message.from_user.id) == ADMIN_USER_ID
    send_back_to_menu_message(message.chat.id, is_admin)


def ask_for_surname(message):
    bot.send_message(message.chat.id, "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è*:")
    bot.register_next_step_handler(message, ask_for_name, surname=message.text)

def ask_for_name(message, surname):
    bot.send_message(message.chat.id, "üìç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à *–∞–¥—Ä–µ—Å* (–ì–æ—Ä–æ–¥, —Ä–∞–π–æ–Ω, —É–ª–∏—Ü–∞, –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã):")
    bot.register_next_step_handler(message, ask_for_address, surname=surname, name=message.text)

def ask_for_address(message, surname, name):
    bot.send_message(message.chat.id, "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*: (–Ω–∞–ø—Ä–∏–º–µ—Ä, 87771234567)")
    bot.register_next_step_handler(message, ask_for_phone_number, surname=surname, name=name, address=message.text)

def ask_for_phone_number(message, surname, name, address):
    user_id = message.from_user.id
    phone_number = message.text
    if is_user_registered(user_id):
        bot.send_message(message.chat.id, "üéâ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üéâ")
    elif register_new_user(user_id, surname, name, address, phone_number):
        bot.send_message(message.chat.id, "‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!* –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–±! üéâ", parse_mode='Markdown')
        send_back_to_menu_message(message.chat.id, False)
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ‚ùå")


@bot.message_handler(func=lambda message: message.text == "üé´ –ú–æ–∏ –±–∏–ª–µ—Ç—ã")
def my_tickets_handler(message):
    user_id = message.from_user.id
    user = is_user_registered(user_id)

    if not user:
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. ‚ùå")
        return

    tickets = fetch_user_tickets(user_id)
    if tickets:
        response_lines = ["üé´ *–í–∞—à–∏ –±–∏–ª–µ—Ç—ã:* üé´"]
        response_lines.append(f"–í—Å–µ–≥–æ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ: *{len(tickets)} —à—Ç.*")
        response_lines.append("---")
        for ticket in tickets:
            response_lines.append(f"–ë–∏–ª–µ—Ç ‚Ññ: *{ticket[0]}* | –î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: {ticket[1].strftime('%d.%m.%Y %H:%M')}")
        response_text = "\n".join(response_lines)
        bot.send_message(message.chat.id, response_text, parse_mode='Markdown')

    else:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤. ‚ÑπÔ∏è")
    send_back_to_menu_message(message.chat.id, str(user_id) == ADMIN_USER_ID)


@bot.message_handler(func=lambda message: message.text == "üéüÔ∏è –ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã")
def get_tickets_handler(message):
    user_id = message.from_user.id
    if not is_user_registered(user_id):
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. ‚ùå")
        return
    bot.send_message(message.chat.id, "üßæ –û—Ç–ø—Ä–∞–≤—å—Ç–µ *—á–µ–∫* –≤ —Ñ–æ—Ä–º–∞—Ç–µ *PDF* –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤. üöÄ", parse_mode='Markdown')


@bot.message_handler(func=lambda message: message.text == "üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
def results_handler(message):
    results_message = "üèÜ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–∫—É—Ä—Å–∞ –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ!</b> üèÜ\n\n"
    results_message += "–û–∂–∏–¥–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π! üîî"

    inline_menu = InlineKeyboardMarkup()
    learn_more_button = InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚ÑπÔ∏è", callback_data='learn_results')
    inline_menu.add(learn_more_button)

    bot.send_message(message.chat.id, results_message, parse_mode='HTML', reply_markup=inline_menu)


@bot.callback_query_handler(func=lambda call: call.data == 'learn_results')
def callback_inline(call):
    if call.message:
        detailed_results_message = (
            "üìú <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∫–æ–Ω–∫—É—Ä—Å–∞:</b> üìú\n\n"
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, "
            "–ø–æ–ª—É—á–∏–≤—à–∏—Ö –±–∏–ª–µ—Ç—ã. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –∫–∞–Ω–∞–ª–µ! üì¢\n\n"
            "–î–∞—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: <b>[–î–∞—Ç–∞ –±—É–¥–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ]</b>. üìÖ\n"
            "–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: <b>[–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ –±—É–¥–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω –ø–æ–∑–∂–µ]</b>. üéÅ\n\n"
            "–ñ–µ–ª–∞–µ–º –≤—Å–µ–º —É–¥–∞—á–∏! üëç"
        )
        bot.send_message(call.message.chat.id, detailed_results_message, parse_mode='HTML')


@bot.message_handler(commands=['export_users'])
def export_users_command_handler(message):
    if message.from_user.id == int(ADMIN_USER_ID):
        users = fetch_all_users()
        if users:
            excel_file = generate_users_excel_report(users)
            bot.send_document(message.chat.id, excel_file,
                                             caption="üìä *–û—Ç—á–µ—Ç –ø–æ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π* üìä",
                                             file_name="user_data.xlsx", parse_mode='Markdown')
        else:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. ‚ÑπÔ∏è")
    else:
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. üö´")



@bot.message_handler(content_types=['document'])
def handle_receipt_document(message):
    if message.document.mime_type == 'application/pdf':
        try:
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            pdf_file = BytesIO(downloaded_file)

            receipt_text = extract_text_from_pdf_file(pdf_file)
            receipt_data = extract_receipt_details(receipt_text)

            if receipt_data["amount"] and receipt_data["number"]:
                amount = int(receipt_data["amount"])
                bill_number = receipt_data["number"]
                user_id = message.from_user.id

                tickets_received = update_user_tickets_count(user_id, amount, bill_number)

                if tickets_received > 0:
                    bot.send_message(message.chat.id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ *{tickets_received} –±–∏–ª–µ—Ç–æ–≤*! üéüÔ∏è –£–¥–∞—á–∏ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ! üéâ", parse_mode='Markdown')
                else:
                    pass
            else:
                bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —á–µ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ *PDF*. ‚ùå", parse_mode='Markdown')

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF —á–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ùå")

    else:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ *PDF*. ‚ùå", parse_mode='Markdown')
    send_back_to_menu_message(message.chat.id, str(message.from_user.id) == ADMIN_USER_ID)


if __name__ == '__main__':
    create_user_table_if_not_exists()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.polling(non_stop=True)
